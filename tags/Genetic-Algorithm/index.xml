<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Genetic Algorithm on</title><link>https://niuez.github.io/tags/Genetic-Algorithm/</link><description>Recent content in Genetic Algorithm on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Dec 2022 15:00:00 +0900</lastBuildDate><atom:link href="https://niuez.github.io/tags/Genetic-Algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Genetic Algorithm + Lexicase SelectionによるBoolean CSPのアプローチ</title><link>https://niuez.github.io/notes/lexicase_booleanCSP/</link><pubDate>Thu, 29 Dec 2022 15:00:00 +0900</pubDate><guid>https://niuez.github.io/notes/lexicase_booleanCSP/</guid><description>概要 多目的関数の場合に線形和を取るとパラメータ調整に時間がかかってしまう。特に、目的関数がとても多い場合はもっと難しくなる。ここでは、多目的関数Genetic AlgorithmのSelection(選択)で使えるLexicase Selectionの概要と、それを用いたBoolean CSPへのアプローチをメモしておく。
今回も、目的関数は小さくするのを目標とする。
参考: Lexicase Selection Beyond Genetic Programming, スライド版
Lexicase Selection Lexicase Selectionは以下のようなアルゴリズムである。
$I$を現在の世代の個体全ての集合とする。 目的関数をランダムにシャッフルした配列$f_i$を構成する $i = 1.</description></item><item><title>Genetic Local Search + MSXFの勉強とIntroduction to Heuristic Contest</title><link>https://niuez.github.io/notes/genetic_local_search_IHC/</link><pubDate>Sun, 11 Dec 2022 15:00:00 +0900</pubDate><guid>https://niuez.github.io/notes/genetic_local_search_IHC/</guid><description>概要 遺伝的アルゴリズム(Genetic Algorithm)の練習として Introduction to Heuristic Contestの問題を解いてみました。最終的なスコアは117Mで焼きなましの124Mには劣りますが、良い成績は得られていそうです。
前回勉強したGenetic Algorithmの入門の話も参考に
方針 遺伝的局所探索法によるジョブショップスケジューリング問題の解法で述べられている
Genetic Local Search(遺伝的局所探索, GLS) Multi Step Crossover Fusion(多段階探索交叉, MSXF) の2つの手法を取り入れました。</description></item><item><title>Genetic Algorithmの勉強と巡回セールスマン問題</title><link>https://niuez.github.io/notes/genetic_local_search_tsp/</link><pubDate>Sat, 10 Dec 2022 15:00:00 +0900</pubDate><guid>https://niuez.github.io/notes/genetic_local_search_tsp/</guid><description>Genetic Algorithm Genetic Algorithm(GA, 遺伝的アルゴリズム)は、問題に対する解を個体とし、選択・交叉・突然変異の操作によって個体の集合からなる世代を更新し、最適解を導くヒューリスティックアルゴリズムです。
AtCoderの巡回セールスマン問題のジャッジを通せたので、手法を書き残しておきます。 ジャッジ結果
染色体の定義 各個体には「染色体」と呼ばれる、解を持つ情報の列を持たせます。今回は訪れる頂点番号の順番をそのまま順列として保持しました。
交叉 Genetic Algorithm中では、二つの染色体を混ぜて新しい染色体を作り出す「交叉」という操作を行います。この操作では二つの解の特徴を残しながら繋ぐ必要があります。今回は順序交叉を用いました。
順序交叉は片方の親から一部の順列をそのまま引き継ぎ、残りの部分についてはもう一つの親での相対的な順序で補完するというものです。
1 2 3 4 5 6 p1 = (1 2 3 | 4 5 6 7 | 8 9) p2 = (4 5 2 | 1 8 7 6 | 9 3) p2&amp;#39;= (9 3 2 1 8) ch = (2 1 8 | 4 5 6 7 | 9 3) 突然変異 解が確率で新しい解を見つけるように、突然変異という操作を行います。今回は、確率で2点swapを行うことにしました。</description></item></channel></rss>